###
# #%L
# Genome Damage and Stability Centre Test API
#
# Contains a generic framework for test predicates.
# %%
# Copyright (C) 2018 - 2022 Alex Herbert
# %%
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# #L%
###
# For all types
template.types = boolean byte char double float int long short
template.Types = Boolean Byte Char Double Float Int Long Short
# The values to test for each type
template.booleanValues = true false
template.byteValues = "(byte) 0" "(byte) 1" Byte.MAX_VALUE Byte.MIN_VALUE
template.charValues = 'A' 'B'
template.doubleValues = Double.NEGATIVE_INFINITY -1 -0 0 1 1.5 Math.PI Double.POSITIVE_INFINITY Double.NaN Double.MAX_VALUE
template.floatValues = Float.NEGATIVE_INFINITY -1 -0 0 1 1.5f "(float) Math.PI" Float.POSITIVE_INFINITY Float.NaN Double.MIN_VALUE
template.integerValues = 0 1 Integer.MAX_VALUE Integer.MIN_VALUE
template.longValues = 0L 1L Long.MAX_VALUE Long.MIN_VALUE
template.shortValues = "(short) 0" "(short) 1" Short.MAX_VALUE Short.MIN_VALUE
# For special case floating point numbers
template.Floats = Double Float
template.floats = double float
template.Ints = Long Int
template.Specials = NaN Infinite Finite
template.ulpTypes = int short
# For numbers
template.Numbers = Byte Double Float Int Long Short
template.numbers = byte double float int long short
template.NumberAbsTypes = Int Double Float Long Long Int
template.numberAbsTypes = int double float long long int
# For combined single-valued predicates
template.Ops = And Or Xor
template.ops = and or xor
template.operators = && || ^
