###
# #%L
# Genome Damage and Stability Centre Test API
#
# Contains a generic framework for test predicates.
# %%
# Copyright (C) 2018 - 2020 Alex Herbert
# %%
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/gpl-3.0.html>.
# #L%
###
# For all types
template.types = boolean byte char double float int long short
template.Types = Boolean Byte Char Double Float Int Long Short
# The values to test for each type
template.booleanValues = true false
template.byteValues = (byte)0 (byte)1 Byte.MAX_VALUE Byte.MIN_VALUE
template.charValues = 'A' 'B'
template.doubleValues = Double.NEGATIVE_INFINITY -1 -0 0 1 1.5 Math.PI Double.POSITIVE_INFINITY Double.NaN Double.MAX_VALUE
template.floatValues = Float.NEGATIVE_INFINITY -1 -0 0 1 1.5f (float)Math.PI Float.POSITIVE_INFINITY Float.NaN Double.MIN_VALUE
template.integerValues = 0 1 Integer.MAX_VALUE Integer.MIN_VALUE
template.longValues = 0L 1L Long.MAX_VALUE Long.MIN_VALUE
template.shortValues = (short)0 (short)1 Short.MAX_VALUE Short.MIN_VALUE
# For special case floating point numbers
template.Floats = Double Float
template.floats = double float
template.Ints = Long Int
template.Specials = NaN Infinite Finite
template.ulpTypes = int short
# For numbers
template.Numbers = Byte Double Float Int Long Short
template.numbers = byte double float int long short
template.NumberAbsTypes = Int Double Float Long Long Int
template.numberAbsTypes = int double float long long int
# For combined single-valued predicates
template.Ops = And Or Xor
template.ops = and or xor
template.operators = && || ^
